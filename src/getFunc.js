import React from "react";

import { connect } from "react-redux";

import timeDiff from "./timeDiff";

import { currentProjectData } from "./redux/projectData/projectData.actions";

//const fetchData = () => {

const getFunc = async () => {

//async function() {

    let dataOfTripCard = {};

    const create_UUID = () => {
        var dt = new Date().getTime();
        var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = (dt + Math.random() * 16) % 16 | 0;
            dt = Math.floor(dt / 16);
            return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);
        });
        return uuid;
    }

    const username = "salah_2";
    const weatherbitAPIKey = "2f3e278d4be24ab6b4e423bc8173692e";
    const pixabayAPIKey = "16218326-43ea96121b489407a6f95ba78";

    const baseURLGeo = "http://api.geonames.org/searchJSON?q=";
    const baseURLWeatherCurrent = "https://api.weatherbit.io/v2.0/current?";
    const baseURLWeatherForecast = "https://api.weatherbit.io/v2.0/forecast/daily?";
    const baseURLPixabay = "https://pixabay.com/api/?";

    const city = this.props.currentInputs.city;
    const depDateFromUser = this.props.currentInputs.depDateFromUser;
    const retDateFromUser = this.props.currentInputs.retDateFromUser;

    // const city = this.refs.city.value;
    // const depDateFromUser = this.refs.departureDate.value;
    // const retDateFromUser = this.refs.returnDate.value;

    // Create a new date instance dynamically with JS
    const d = new Date();
    const newDate = d.getMonth() + 1 + '/' + d.getDate() + '/' + d.getFullYear();

    const resGeo = await fetch(baseURLGeo + encodeURI(city) + "&username=" + username);

    try {
        const data = await resGeo.json();
        const countryName = data.geonames[0].countryName;
        const latitude = data.geonames[0].lat;
        const longitude = data.geonames[0].lng;
        const daysLeft = timeDiff(newDate, depDateFromUser, retDateFromUser);

        const resWeather = await fetch(
            ((daysLeft > 7) ? baseURLWeatherForecast : baseURLWeatherCurrent) + "key=" + weatherbitAPIKey + "&lat=" + latitude + "&lon=" + longitude
        );

        const data2 = await resWeather.json();
        const weather = data2.data[0].weather.description;

        const resPixabayPhoto = await fetch(baseURLPixabay + "key=" + pixabayAPIKey + "&q=" + encodeURI(city) + "+tourism&image_type=photo");

        const data3 = await resPixabayPhoto.json();
        const cityPhoto = data3.hits[0].webformatURL;

        // id generated by create_UUID function
        const currentId = create_UUID();

        const tripData = {
            cityPhoto: cityPhoto,
            country: countryName,
            date: newDate,
            depDate: depDateFromUser,
            retDate: retDateFromUser,
            daysLeft: daysLeft,
            weather: weather,
            temp: (daysLeft > 7) ? {
                low_temp: data2.data[0].low_temp,
                max_temp: data2.data[0].max_temp,
                trueOrFalse: true //For the if statement in updateUI in the client side
            } : {
                    temp: data2.data[0].temp,
                    trueOrFalse: false //For the if statement in updateUI in the client side
                },
            lat: latitude,
            lng: longitude,
            tripId: currentId
        };

        dataOfTripCard[currentId] = tripData;

        // this.props.currentProjectData({
        //     currentProjectData: "dataOfTripCard"
        // })

        return dataOfTripCard;

    } catch (error) {
        console.log("error", error);
        //appropriately handle the error
    }

    // this.props.currentProjectData({
    //     currentProjectData: "dataOfTripCard"
    // })
};

    // getFunc().then((dataOfTripCard) => {
    //     this.props.currentProjectData({
    //         dataOfTripCard
    //     })
    // });

//}
const mapStateToProps = state => ({
    currentInputs: state.inputs.currentInputs
});

const mapDispatchToProps = dispatch => ({
    currentProjectData: projectData => dispatch(currentProjectData(projectData))
})

export default connect(mapStateToProps, mapDispatchToProps)(getFunc);